//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: RABackend.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// internal
///
/// Usage: instantiate `RABackend_SupportPortalClient`, then call methods of this protocol to make API calls.
public protocol RABackend_SupportPortalClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: RABackend_SupportPortalClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func setDiscovery(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions?
  ) -> UnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>

  func discovery(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, RABackend_Endpoint>
}

extension RABackend_SupportPortalClientProtocol {
  public var serviceName: String {
    return "RABackend.SupportPortal"
  }

  /// Unary call to ping
  ///
  /// - Parameters:
  ///   - request: Request to send to ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RABackend_SupportPortalClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  /// Unary call to setDiscovery
  ///
  /// - Parameters:
  ///   - request: Request to send to setDiscovery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setDiscovery(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RABackend_SupportPortalClientMetadata.Methods.setDiscovery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesetDiscoveryInterceptors() ?? []
    )
  }

  /// Unary call to discovery
  ///
  /// - Parameters:
  ///   - request: Request to send to discovery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func discovery(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, RABackend_Endpoint> {
    return self.makeUnaryCall(
      path: RABackend_SupportPortalClientMetadata.Methods.discovery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makediscoveryInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension RABackend_SupportPortalClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "RABackend_SupportPortalNIOClient")
public final class RABackend_SupportPortalClient: RABackend_SupportPortalClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: RABackend_SupportPortalClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: RABackend_SupportPortalClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the RABackend.SupportPortal service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_SupportPortalClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct RABackend_SupportPortalNIOClient: RABackend_SupportPortalClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RABackend_SupportPortalClientInterceptorFactoryProtocol?

  /// Creates a client for the RABackend.SupportPortal service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_SupportPortalClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// internal
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RABackend_SupportPortalAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RABackend_SupportPortalClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func makeSetDiscoveryCall(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDiscoveryCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, RABackend_Endpoint>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_SupportPortalAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RABackend_SupportPortalClientMetadata.serviceDescriptor
  }

  public var interceptors: RABackend_SupportPortalClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RABackend_SupportPortalClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  public func makeSetDiscoveryCall(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RABackend_SupportPortalClientMetadata.Methods.setDiscovery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesetDiscoveryInterceptors() ?? []
    )
  }

  public func makeDiscoveryCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, RABackend_Endpoint> {
    return self.makeAsyncUnaryCall(
      path: RABackend_SupportPortalClientMetadata.Methods.discovery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makediscoveryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_SupportPortalAsyncClientProtocol {
  public func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RABackend_SupportPortalClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  public func setDiscovery(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RABackend_SupportPortalClientMetadata.Methods.setDiscovery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesetDiscoveryInterceptors() ?? []
    )
  }

  public func discovery(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> RABackend_Endpoint {
    return try await self.performAsyncUnaryCall(
      path: RABackend_SupportPortalClientMetadata.Methods.discovery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makediscoveryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct RABackend_SupportPortalAsyncClient: RABackend_SupportPortalAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RABackend_SupportPortalClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_SupportPortalClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol RABackend_SupportPortalClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makepingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'setDiscovery'.
  func makesetDiscoveryInterceptors() -> [ClientInterceptor<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'discovery'.
  func makediscoveryInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, RABackend_Endpoint>]
}

public enum RABackend_SupportPortalClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SupportPortal",
    fullName: "RABackend.SupportPortal",
    methods: [
      RABackend_SupportPortalClientMetadata.Methods.ping,
      RABackend_SupportPortalClientMetadata.Methods.setDiscovery,
      RABackend_SupportPortalClientMetadata.Methods.discovery,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "ping",
      path: "/RABackend.SupportPortal/ping",
      type: GRPCCallType.unary
    )

    public static let setDiscovery = GRPCMethodDescriptor(
      name: "setDiscovery",
      path: "/RABackend.SupportPortal/setDiscovery",
      type: GRPCCallType.unary
    )

    public static let discovery = GRPCMethodDescriptor(
      name: "discovery",
      path: "/RABackend.SupportPortal/discovery",
      type: GRPCCallType.unary
    )
  }
}

/// inward
///
/// Usage: instantiate `RABackend_DiscoveryServiceClient`, then call methods of this protocol to make API calls.
public protocol RABackend_DiscoveryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: RABackend_DiscoveryServiceClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func setDiscovery(
    _ request: RABackend_ServiceList,
    callOptions: CallOptions?
  ) -> UnaryCall<RABackend_ServiceList, SwiftProtobuf.Google_Protobuf_Empty>

  func discover(
    _ request: RABackend_DiscoveryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RABackend_DiscoveryRequest, RABackend_DiscoveryResponse>
}

extension RABackend_DiscoveryServiceClientProtocol {
  public var serviceName: String {
    return "RABackend.DiscoveryService"
  }

  /// Unary call to ping
  ///
  /// - Parameters:
  ///   - request: Request to send to ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RABackend_DiscoveryServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  /// Unary call to setDiscovery
  ///
  /// - Parameters:
  ///   - request: Request to send to setDiscovery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setDiscovery(
    _ request: RABackend_ServiceList,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RABackend_ServiceList, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RABackend_DiscoveryServiceClientMetadata.Methods.setDiscovery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesetDiscoveryInterceptors() ?? []
    )
  }

  /// Unary call to discover
  ///
  /// - Parameters:
  ///   - request: Request to send to discover.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func discover(
    _ request: RABackend_DiscoveryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RABackend_DiscoveryRequest, RABackend_DiscoveryResponse> {
    return self.makeUnaryCall(
      path: RABackend_DiscoveryServiceClientMetadata.Methods.discover.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makediscoverInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension RABackend_DiscoveryServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "RABackend_DiscoveryServiceNIOClient")
public final class RABackend_DiscoveryServiceClient: RABackend_DiscoveryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: RABackend_DiscoveryServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: RABackend_DiscoveryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the RABackend.DiscoveryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_DiscoveryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct RABackend_DiscoveryServiceNIOClient: RABackend_DiscoveryServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RABackend_DiscoveryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the RABackend.DiscoveryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_DiscoveryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// inward
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RABackend_DiscoveryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RABackend_DiscoveryServiceClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func makeSetDiscoveryCall(
    _ request: RABackend_ServiceList,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RABackend_ServiceList, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDiscoverCall(
    _ request: RABackend_DiscoveryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RABackend_DiscoveryRequest, RABackend_DiscoveryResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_DiscoveryServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RABackend_DiscoveryServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: RABackend_DiscoveryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RABackend_DiscoveryServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  public func makeSetDiscoveryCall(
    _ request: RABackend_ServiceList,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RABackend_ServiceList, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RABackend_DiscoveryServiceClientMetadata.Methods.setDiscovery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesetDiscoveryInterceptors() ?? []
    )
  }

  public func makeDiscoverCall(
    _ request: RABackend_DiscoveryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RABackend_DiscoveryRequest, RABackend_DiscoveryResponse> {
    return self.makeAsyncUnaryCall(
      path: RABackend_DiscoveryServiceClientMetadata.Methods.discover.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makediscoverInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_DiscoveryServiceAsyncClientProtocol {
  public func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RABackend_DiscoveryServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  public func setDiscovery(
    _ request: RABackend_ServiceList,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RABackend_DiscoveryServiceClientMetadata.Methods.setDiscovery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesetDiscoveryInterceptors() ?? []
    )
  }

  public func discover(
    _ request: RABackend_DiscoveryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> RABackend_DiscoveryResponse {
    return try await self.performAsyncUnaryCall(
      path: RABackend_DiscoveryServiceClientMetadata.Methods.discover.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makediscoverInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct RABackend_DiscoveryServiceAsyncClient: RABackend_DiscoveryServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RABackend_DiscoveryServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_DiscoveryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol RABackend_DiscoveryServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makepingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'setDiscovery'.
  func makesetDiscoveryInterceptors() -> [ClientInterceptor<RABackend_ServiceList, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'discover'.
  func makediscoverInterceptors() -> [ClientInterceptor<RABackend_DiscoveryRequest, RABackend_DiscoveryResponse>]
}

public enum RABackend_DiscoveryServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DiscoveryService",
    fullName: "RABackend.DiscoveryService",
    methods: [
      RABackend_DiscoveryServiceClientMetadata.Methods.ping,
      RABackend_DiscoveryServiceClientMetadata.Methods.setDiscovery,
      RABackend_DiscoveryServiceClientMetadata.Methods.discover,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "ping",
      path: "/RABackend.DiscoveryService/ping",
      type: GRPCCallType.unary
    )

    public static let setDiscovery = GRPCMethodDescriptor(
      name: "setDiscovery",
      path: "/RABackend.DiscoveryService/setDiscovery",
      type: GRPCCallType.unary
    )

    public static let discover = GRPCMethodDescriptor(
      name: "discover",
      path: "/RABackend.DiscoveryService/discover",
      type: GRPCCallType.unary
    )
  }
}

/// outward
///
/// Usage: instantiate `RABackend_PlayerPortalClient`, then call methods of this protocol to make API calls.
public protocol RABackend_PlayerPortalClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: RABackend_PlayerPortalClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func salt(
    _ request: RABackend_PlayerID,
    callOptions: CallOptions?
  ) -> UnaryCall<RABackend_PlayerID, RABackend_SaltResponse>

  func newPlayer(
    _ request: RABackend_NewPlayerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RABackend_NewPlayerRequest, RABackend_NewPlayerResponse>

  func login(
    _ request: RABackend_LoginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RABackend_LoginRequest, RABackend_LoginResponse>

  func authenticate(
    _ request: RABackend_Credentials,
    callOptions: CallOptions?
  ) -> UnaryCall<RABackend_Credentials, RABackend_AuthenticationResponse>

  func logout(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func addGameplayPortal(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions?
  ) -> UnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>

  func removeGameplayPortal(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions?
  ) -> UnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>
}

extension RABackend_PlayerPortalClientProtocol {
  public var serviceName: String {
    return "RABackend.PlayerPortal"
  }

  /// Unary call to ping
  ///
  /// - Parameters:
  ///   - request: Request to send to ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  /// This must always return a salt, even if the playerID does not exist.  This is to prevent the method from being used to mine for actual player IDs.
  ///
  /// - Parameters:
  ///   - request: Request to send to salt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func salt(
    _ request: RABackend_PlayerID,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RABackend_PlayerID, RABackend_SaltResponse> {
    return self.makeUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.salt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesaltInterceptors() ?? []
    )
  }

  /// Unary call to NewPlayer
  ///
  /// - Parameters:
  ///   - request: Request to send to NewPlayer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func newPlayer(
    _ request: RABackend_NewPlayerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RABackend_NewPlayerRequest, RABackend_NewPlayerResponse> {
    return self.makeUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.newPlayer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewPlayerInterceptors() ?? []
    )
  }

  /// Unary call to login
  ///
  /// - Parameters:
  ///   - request: Request to send to login.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func login(
    _ request: RABackend_LoginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RABackend_LoginRequest, RABackend_LoginResponse> {
    return self.makeUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeloginInterceptors() ?? []
    )
  }

  /// Unary call to Authenticate
  ///
  /// - Parameters:
  ///   - request: Request to send to Authenticate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func authenticate(
    _ request: RABackend_Credentials,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RABackend_Credentials, RABackend_AuthenticationResponse> {
    return self.makeUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  /// Unary call to logout
  ///
  /// - Parameters:
  ///   - request: Request to send to logout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func logout(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.logout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makelogoutInterceptors() ?? []
    )
  }

  /// Unary call to addGameplayPortal
  ///
  /// - Parameters:
  ///   - request: Request to send to addGameplayPortal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addGameplayPortal(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.addGameplayPortal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddGameplayPortalInterceptors() ?? []
    )
  }

  /// Unary call to removeGameplayPortal
  ///
  /// - Parameters:
  ///   - request: Request to send to removeGameplayPortal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func removeGameplayPortal(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.removeGameplayPortal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveGameplayPortalInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension RABackend_PlayerPortalClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "RABackend_PlayerPortalNIOClient")
public final class RABackend_PlayerPortalClient: RABackend_PlayerPortalClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: RABackend_PlayerPortalClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: RABackend_PlayerPortalClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the RABackend.PlayerPortal service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_PlayerPortalClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct RABackend_PlayerPortalNIOClient: RABackend_PlayerPortalClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RABackend_PlayerPortalClientInterceptorFactoryProtocol?

  /// Creates a client for the RABackend.PlayerPortal service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_PlayerPortalClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// outward
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RABackend_PlayerPortalAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RABackend_PlayerPortalClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func makeSaltCall(
    _ request: RABackend_PlayerID,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RABackend_PlayerID, RABackend_SaltResponse>

  func makeNewPlayerCall(
    _ request: RABackend_NewPlayerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RABackend_NewPlayerRequest, RABackend_NewPlayerResponse>

  func makeLoginCall(
    _ request: RABackend_LoginRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RABackend_LoginRequest, RABackend_LoginResponse>

  func makeAuthenticateCall(
    _ request: RABackend_Credentials,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RABackend_Credentials, RABackend_AuthenticationResponse>

  func makeLogoutCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func makeAddGameplayPortalCall(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>

  func makeRemoveGameplayPortalCall(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_PlayerPortalAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RABackend_PlayerPortalClientMetadata.serviceDescriptor
  }

  public var interceptors: RABackend_PlayerPortalClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  public func makeSaltCall(
    _ request: RABackend_PlayerID,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RABackend_PlayerID, RABackend_SaltResponse> {
    return self.makeAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.salt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesaltInterceptors() ?? []
    )
  }

  public func makeNewPlayerCall(
    _ request: RABackend_NewPlayerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RABackend_NewPlayerRequest, RABackend_NewPlayerResponse> {
    return self.makeAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.newPlayer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewPlayerInterceptors() ?? []
    )
  }

  public func makeLoginCall(
    _ request: RABackend_LoginRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RABackend_LoginRequest, RABackend_LoginResponse> {
    return self.makeAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeloginInterceptors() ?? []
    )
  }

  public func makeAuthenticateCall(
    _ request: RABackend_Credentials,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RABackend_Credentials, RABackend_AuthenticationResponse> {
    return self.makeAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  public func makeLogoutCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.logout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makelogoutInterceptors() ?? []
    )
  }

  public func makeAddGameplayPortalCall(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.addGameplayPortal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddGameplayPortalInterceptors() ?? []
    )
  }

  public func makeRemoveGameplayPortalCall(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.removeGameplayPortal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveGameplayPortalInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_PlayerPortalAsyncClientProtocol {
  public func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  public func salt(
    _ request: RABackend_PlayerID,
    callOptions: CallOptions? = nil
  ) async throws -> RABackend_SaltResponse {
    return try await self.performAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.salt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesaltInterceptors() ?? []
    )
  }

  public func newPlayer(
    _ request: RABackend_NewPlayerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> RABackend_NewPlayerResponse {
    return try await self.performAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.newPlayer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewPlayerInterceptors() ?? []
    )
  }

  public func login(
    _ request: RABackend_LoginRequest,
    callOptions: CallOptions? = nil
  ) async throws -> RABackend_LoginResponse {
    return try await self.performAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeloginInterceptors() ?? []
    )
  }

  public func authenticate(
    _ request: RABackend_Credentials,
    callOptions: CallOptions? = nil
  ) async throws -> RABackend_AuthenticationResponse {
    return try await self.performAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  public func logout(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.logout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makelogoutInterceptors() ?? []
    )
  }

  public func addGameplayPortal(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.addGameplayPortal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddGameplayPortalInterceptors() ?? []
    )
  }

  public func removeGameplayPortal(
    _ request: RABackend_Endpoint,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RABackend_PlayerPortalClientMetadata.Methods.removeGameplayPortal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveGameplayPortalInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct RABackend_PlayerPortalAsyncClient: RABackend_PlayerPortalAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RABackend_PlayerPortalClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_PlayerPortalClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol RABackend_PlayerPortalClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makepingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'salt'.
  func makesaltInterceptors() -> [ClientInterceptor<RABackend_PlayerID, RABackend_SaltResponse>]

  /// - Returns: Interceptors to use when invoking 'newPlayer'.
  func makeNewPlayerInterceptors() -> [ClientInterceptor<RABackend_NewPlayerRequest, RABackend_NewPlayerResponse>]

  /// - Returns: Interceptors to use when invoking 'login'.
  func makeloginInterceptors() -> [ClientInterceptor<RABackend_LoginRequest, RABackend_LoginResponse>]

  /// - Returns: Interceptors to use when invoking 'authenticate'.
  func makeAuthenticateInterceptors() -> [ClientInterceptor<RABackend_Credentials, RABackend_AuthenticationResponse>]

  /// - Returns: Interceptors to use when invoking 'logout'.
  func makelogoutInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'addGameplayPortal'.
  func makeaddGameplayPortalInterceptors() -> [ClientInterceptor<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'removeGameplayPortal'.
  func makeremoveGameplayPortalInterceptors() -> [ClientInterceptor<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum RABackend_PlayerPortalClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PlayerPortal",
    fullName: "RABackend.PlayerPortal",
    methods: [
      RABackend_PlayerPortalClientMetadata.Methods.ping,
      RABackend_PlayerPortalClientMetadata.Methods.salt,
      RABackend_PlayerPortalClientMetadata.Methods.newPlayer,
      RABackend_PlayerPortalClientMetadata.Methods.login,
      RABackend_PlayerPortalClientMetadata.Methods.authenticate,
      RABackend_PlayerPortalClientMetadata.Methods.logout,
      RABackend_PlayerPortalClientMetadata.Methods.addGameplayPortal,
      RABackend_PlayerPortalClientMetadata.Methods.removeGameplayPortal,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "ping",
      path: "/RABackend.PlayerPortal/ping",
      type: GRPCCallType.unary
    )

    public static let salt = GRPCMethodDescriptor(
      name: "salt",
      path: "/RABackend.PlayerPortal/salt",
      type: GRPCCallType.unary
    )

    public static let newPlayer = GRPCMethodDescriptor(
      name: "NewPlayer",
      path: "/RABackend.PlayerPortal/NewPlayer",
      type: GRPCCallType.unary
    )

    public static let login = GRPCMethodDescriptor(
      name: "login",
      path: "/RABackend.PlayerPortal/login",
      type: GRPCCallType.unary
    )

    public static let authenticate = GRPCMethodDescriptor(
      name: "Authenticate",
      path: "/RABackend.PlayerPortal/Authenticate",
      type: GRPCCallType.unary
    )

    public static let logout = GRPCMethodDescriptor(
      name: "logout",
      path: "/RABackend.PlayerPortal/logout",
      type: GRPCCallType.unary
    )

    public static let addGameplayPortal = GRPCMethodDescriptor(
      name: "addGameplayPortal",
      path: "/RABackend.PlayerPortal/addGameplayPortal",
      type: GRPCCallType.unary
    )

    public static let removeGameplayPortal = GRPCMethodDescriptor(
      name: "removeGameplayPortal",
      path: "/RABackend.PlayerPortal/removeGameplayPortal",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `RABackend_GatewayClient`, then call methods of this protocol to make API calls.
public protocol RABackend_GatewayClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: RABackend_GatewayClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func connect(
    callOptions: CallOptions?,
    handler: @escaping (RABackend_GameStatus) -> Void
  ) -> BidirectionalStreamingCall<RABackend_GameCommand, RABackend_GameStatus>
}

extension RABackend_GatewayClientProtocol {
  public var serviceName: String {
    return "RABackend.Gateway"
  }

  /// Unary call to ping
  ///
  /// - Parameters:
  ///   - request: Request to send to ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RABackend_GatewayClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to connect
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func connect(
    callOptions: CallOptions? = nil,
    handler: @escaping (RABackend_GameStatus) -> Void
  ) -> BidirectionalStreamingCall<RABackend_GameCommand, RABackend_GameStatus> {
    return self.makeBidirectionalStreamingCall(
      path: RABackend_GatewayClientMetadata.Methods.connect.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension RABackend_GatewayClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "RABackend_GatewayNIOClient")
public final class RABackend_GatewayClient: RABackend_GatewayClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: RABackend_GatewayClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: RABackend_GatewayClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the RABackend.Gateway service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_GatewayClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct RABackend_GatewayNIOClient: RABackend_GatewayClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RABackend_GatewayClientInterceptorFactoryProtocol?

  /// Creates a client for the RABackend.Gateway service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_GatewayClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RABackend_GatewayAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RABackend_GatewayClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func makeConnectCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<RABackend_GameCommand, RABackend_GameStatus>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_GatewayAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RABackend_GatewayClientMetadata.serviceDescriptor
  }

  public var interceptors: RABackend_GatewayClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RABackend_GatewayClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  public func makeConnectCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<RABackend_GameCommand, RABackend_GameStatus> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: RABackend_GatewayClientMetadata.Methods.connect.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_GatewayAsyncClientProtocol {
  public func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RABackend_GatewayClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  public func connect<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<RABackend_GameStatus> where RequestStream: Sequence, RequestStream.Element == RABackend_GameCommand {
    return self.performAsyncBidirectionalStreamingCall(
      path: RABackend_GatewayClientMetadata.Methods.connect.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? []
    )
  }

  public func connect<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<RABackend_GameStatus> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == RABackend_GameCommand {
    return self.performAsyncBidirectionalStreamingCall(
      path: RABackend_GatewayClientMetadata.Methods.connect.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct RABackend_GatewayAsyncClient: RABackend_GatewayAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RABackend_GatewayClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_GatewayClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol RABackend_GatewayClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makepingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'connect'.
  func makeconnectInterceptors() -> [ClientInterceptor<RABackend_GameCommand, RABackend_GameStatus>]
}

public enum RABackend_GatewayClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Gateway",
    fullName: "RABackend.Gateway",
    methods: [
      RABackend_GatewayClientMetadata.Methods.ping,
      RABackend_GatewayClientMetadata.Methods.connect,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "ping",
      path: "/RABackend.Gateway/ping",
      type: GRPCCallType.unary
    )

    public static let connect = GRPCMethodDescriptor(
      name: "connect",
      path: "/RABackend.Gateway/connect",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// Usage: instantiate `RABackend_GamePortalClient`, then call methods of this protocol to make API calls.
public protocol RABackend_GamePortalClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: RABackend_GamePortalClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, RABackend_PingReport>

  func connect(
    callOptions: CallOptions?,
    handler: @escaping (RABackend_GameStatus) -> Void
  ) -> BidirectionalStreamingCall<RABackend_GameCommand, RABackend_GameStatus>
}

extension RABackend_GamePortalClientProtocol {
  public var serviceName: String {
    return "RABackend.GamePortal"
  }

  /// Unary call to ping
  ///
  /// - Parameters:
  ///   - request: Request to send to ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, RABackend_PingReport> {
    return self.makeUnaryCall(
      path: RABackend_GamePortalClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to connect
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func connect(
    callOptions: CallOptions? = nil,
    handler: @escaping (RABackend_GameStatus) -> Void
  ) -> BidirectionalStreamingCall<RABackend_GameCommand, RABackend_GameStatus> {
    return self.makeBidirectionalStreamingCall(
      path: RABackend_GamePortalClientMetadata.Methods.connect.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension RABackend_GamePortalClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "RABackend_GamePortalNIOClient")
public final class RABackend_GamePortalClient: RABackend_GamePortalClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: RABackend_GamePortalClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: RABackend_GamePortalClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the RABackend.GamePortal service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_GamePortalClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct RABackend_GamePortalNIOClient: RABackend_GamePortalClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RABackend_GamePortalClientInterceptorFactoryProtocol?

  /// Creates a client for the RABackend.GamePortal service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_GamePortalClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RABackend_GamePortalAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RABackend_GamePortalClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, RABackend_PingReport>

  func makeConnectCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<RABackend_GameCommand, RABackend_GameStatus>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_GamePortalAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RABackend_GamePortalClientMetadata.serviceDescriptor
  }

  public var interceptors: RABackend_GamePortalClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, RABackend_PingReport> {
    return self.makeAsyncUnaryCall(
      path: RABackend_GamePortalClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  public func makeConnectCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<RABackend_GameCommand, RABackend_GameStatus> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: RABackend_GamePortalClientMetadata.Methods.connect.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_GamePortalAsyncClientProtocol {
  public func ping(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> RABackend_PingReport {
    return try await self.performAsyncUnaryCall(
      path: RABackend_GamePortalClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepingInterceptors() ?? []
    )
  }

  public func connect<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<RABackend_GameStatus> where RequestStream: Sequence, RequestStream.Element == RABackend_GameCommand {
    return self.performAsyncBidirectionalStreamingCall(
      path: RABackend_GamePortalClientMetadata.Methods.connect.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? []
    )
  }

  public func connect<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<RABackend_GameStatus> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == RABackend_GameCommand {
    return self.performAsyncBidirectionalStreamingCall(
      path: RABackend_GamePortalClientMetadata.Methods.connect.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct RABackend_GamePortalAsyncClient: RABackend_GamePortalAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RABackend_GamePortalClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RABackend_GamePortalClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol RABackend_GamePortalClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makepingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, RABackend_PingReport>]

  /// - Returns: Interceptors to use when invoking 'connect'.
  func makeconnectInterceptors() -> [ClientInterceptor<RABackend_GameCommand, RABackend_GameStatus>]
}

public enum RABackend_GamePortalClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "GamePortal",
    fullName: "RABackend.GamePortal",
    methods: [
      RABackend_GamePortalClientMetadata.Methods.ping,
      RABackend_GamePortalClientMetadata.Methods.connect,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "ping",
      path: "/RABackend.GamePortal/ping",
      type: GRPCCallType.unary
    )

    public static let connect = GRPCMethodDescriptor(
      name: "connect",
      path: "/RABackend.GamePortal/connect",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// internal
///
/// To build a server, implement a class that conforms to this protocol.
public protocol RABackend_SupportPortalProvider: CallHandlerProvider {
  var interceptors: RABackend_SupportPortalServerInterceptorFactoryProtocol? { get }

  func ping(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func setDiscovery(request: RABackend_Endpoint, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func discovery(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<RABackend_Endpoint>
}

extension RABackend_SupportPortalProvider {
  public var serviceName: Substring {
    return RABackend_SupportPortalServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makepingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "setDiscovery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_Endpoint>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makesetDiscoveryInterceptors() ?? [],
        userFunction: self.setDiscovery(request:context:)
      )

    case "discovery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<RABackend_Endpoint>(),
        interceptors: self.interceptors?.makediscoveryInterceptors() ?? [],
        userFunction: self.discovery(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// internal
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RABackend_SupportPortalAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RABackend_SupportPortalServerInterceptorFactoryProtocol? { get }

  @Sendable func ping(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func setDiscovery(
    request: RABackend_Endpoint,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func discovery(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> RABackend_Endpoint
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_SupportPortalAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RABackend_SupportPortalServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return RABackend_SupportPortalServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: RABackend_SupportPortalServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makepingInterceptors() ?? [],
        wrapping: self.ping(request:context:)
      )

    case "setDiscovery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_Endpoint>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makesetDiscoveryInterceptors() ?? [],
        wrapping: self.setDiscovery(request:context:)
      )

    case "discovery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<RABackend_Endpoint>(),
        interceptors: self.interceptors?.makediscoveryInterceptors() ?? [],
        wrapping: self.discovery(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol RABackend_SupportPortalServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'setDiscovery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesetDiscoveryInterceptors() -> [ServerInterceptor<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'discovery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makediscoveryInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, RABackend_Endpoint>]
}

public enum RABackend_SupportPortalServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SupportPortal",
    fullName: "RABackend.SupportPortal",
    methods: [
      RABackend_SupportPortalServerMetadata.Methods.ping,
      RABackend_SupportPortalServerMetadata.Methods.setDiscovery,
      RABackend_SupportPortalServerMetadata.Methods.discovery,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "ping",
      path: "/RABackend.SupportPortal/ping",
      type: GRPCCallType.unary
    )

    public static let setDiscovery = GRPCMethodDescriptor(
      name: "setDiscovery",
      path: "/RABackend.SupportPortal/setDiscovery",
      type: GRPCCallType.unary
    )

    public static let discovery = GRPCMethodDescriptor(
      name: "discovery",
      path: "/RABackend.SupportPortal/discovery",
      type: GRPCCallType.unary
    )
  }
}
/// inward
///
/// To build a server, implement a class that conforms to this protocol.
public protocol RABackend_DiscoveryServiceProvider: CallHandlerProvider {
  var interceptors: RABackend_DiscoveryServiceServerInterceptorFactoryProtocol? { get }

  func ping(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func setDiscovery(request: RABackend_ServiceList, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func discover(request: RABackend_DiscoveryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<RABackend_DiscoveryResponse>
}

extension RABackend_DiscoveryServiceProvider {
  public var serviceName: Substring {
    return RABackend_DiscoveryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makepingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "setDiscovery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_ServiceList>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makesetDiscoveryInterceptors() ?? [],
        userFunction: self.setDiscovery(request:context:)
      )

    case "discover":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_DiscoveryRequest>(),
        responseSerializer: ProtobufSerializer<RABackend_DiscoveryResponse>(),
        interceptors: self.interceptors?.makediscoverInterceptors() ?? [],
        userFunction: self.discover(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// inward
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RABackend_DiscoveryServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RABackend_DiscoveryServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func ping(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func setDiscovery(
    request: RABackend_ServiceList,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func discover(
    request: RABackend_DiscoveryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> RABackend_DiscoveryResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_DiscoveryServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RABackend_DiscoveryServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return RABackend_DiscoveryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: RABackend_DiscoveryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makepingInterceptors() ?? [],
        wrapping: self.ping(request:context:)
      )

    case "setDiscovery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_ServiceList>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makesetDiscoveryInterceptors() ?? [],
        wrapping: self.setDiscovery(request:context:)
      )

    case "discover":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_DiscoveryRequest>(),
        responseSerializer: ProtobufSerializer<RABackend_DiscoveryResponse>(),
        interceptors: self.interceptors?.makediscoverInterceptors() ?? [],
        wrapping: self.discover(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol RABackend_DiscoveryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'setDiscovery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesetDiscoveryInterceptors() -> [ServerInterceptor<RABackend_ServiceList, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'discover'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makediscoverInterceptors() -> [ServerInterceptor<RABackend_DiscoveryRequest, RABackend_DiscoveryResponse>]
}

public enum RABackend_DiscoveryServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DiscoveryService",
    fullName: "RABackend.DiscoveryService",
    methods: [
      RABackend_DiscoveryServiceServerMetadata.Methods.ping,
      RABackend_DiscoveryServiceServerMetadata.Methods.setDiscovery,
      RABackend_DiscoveryServiceServerMetadata.Methods.discover,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "ping",
      path: "/RABackend.DiscoveryService/ping",
      type: GRPCCallType.unary
    )

    public static let setDiscovery = GRPCMethodDescriptor(
      name: "setDiscovery",
      path: "/RABackend.DiscoveryService/setDiscovery",
      type: GRPCCallType.unary
    )

    public static let discover = GRPCMethodDescriptor(
      name: "discover",
      path: "/RABackend.DiscoveryService/discover",
      type: GRPCCallType.unary
    )
  }
}
/// outward
///
/// To build a server, implement a class that conforms to this protocol.
public protocol RABackend_PlayerPortalProvider: CallHandlerProvider {
  var interceptors: RABackend_PlayerPortalServerInterceptorFactoryProtocol? { get }

  func ping(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// This must always return a salt, even if the playerID does not exist.  This is to prevent the method from being used to mine for actual player IDs.
  func salt(request: RABackend_PlayerID, context: StatusOnlyCallContext) -> EventLoopFuture<RABackend_SaltResponse>

  func newPlayer(request: RABackend_NewPlayerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<RABackend_NewPlayerResponse>

  func login(request: RABackend_LoginRequest, context: StatusOnlyCallContext) -> EventLoopFuture<RABackend_LoginResponse>

  func authenticate(request: RABackend_Credentials, context: StatusOnlyCallContext) -> EventLoopFuture<RABackend_AuthenticationResponse>

  func logout(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func addGameplayPortal(request: RABackend_Endpoint, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func removeGameplayPortal(request: RABackend_Endpoint, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension RABackend_PlayerPortalProvider {
  public var serviceName: Substring {
    return RABackend_PlayerPortalServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makepingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "salt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_PlayerID>(),
        responseSerializer: ProtobufSerializer<RABackend_SaltResponse>(),
        interceptors: self.interceptors?.makesaltInterceptors() ?? [],
        userFunction: self.salt(request:context:)
      )

    case "NewPlayer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_NewPlayerRequest>(),
        responseSerializer: ProtobufSerializer<RABackend_NewPlayerResponse>(),
        interceptors: self.interceptors?.makeNewPlayerInterceptors() ?? [],
        userFunction: self.newPlayer(request:context:)
      )

    case "login":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_LoginRequest>(),
        responseSerializer: ProtobufSerializer<RABackend_LoginResponse>(),
        interceptors: self.interceptors?.makeloginInterceptors() ?? [],
        userFunction: self.login(request:context:)
      )

    case "Authenticate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_Credentials>(),
        responseSerializer: ProtobufSerializer<RABackend_AuthenticationResponse>(),
        interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? [],
        userFunction: self.authenticate(request:context:)
      )

    case "logout":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makelogoutInterceptors() ?? [],
        userFunction: self.logout(request:context:)
      )

    case "addGameplayPortal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_Endpoint>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeaddGameplayPortalInterceptors() ?? [],
        userFunction: self.addGameplayPortal(request:context:)
      )

    case "removeGameplayPortal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_Endpoint>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeremoveGameplayPortalInterceptors() ?? [],
        userFunction: self.removeGameplayPortal(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// outward
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RABackend_PlayerPortalAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RABackend_PlayerPortalServerInterceptorFactoryProtocol? { get }

  @Sendable func ping(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// This must always return a salt, even if the playerID does not exist.  This is to prevent the method from being used to mine for actual player IDs.
  @Sendable func salt(
    request: RABackend_PlayerID,
    context: GRPCAsyncServerCallContext
  ) async throws -> RABackend_SaltResponse

  @Sendable func newPlayer(
    request: RABackend_NewPlayerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> RABackend_NewPlayerResponse

  @Sendable func login(
    request: RABackend_LoginRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> RABackend_LoginResponse

  @Sendable func authenticate(
    request: RABackend_Credentials,
    context: GRPCAsyncServerCallContext
  ) async throws -> RABackend_AuthenticationResponse

  @Sendable func logout(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func addGameplayPortal(
    request: RABackend_Endpoint,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func removeGameplayPortal(
    request: RABackend_Endpoint,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_PlayerPortalAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RABackend_PlayerPortalServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return RABackend_PlayerPortalServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: RABackend_PlayerPortalServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makepingInterceptors() ?? [],
        wrapping: self.ping(request:context:)
      )

    case "salt":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_PlayerID>(),
        responseSerializer: ProtobufSerializer<RABackend_SaltResponse>(),
        interceptors: self.interceptors?.makesaltInterceptors() ?? [],
        wrapping: self.salt(request:context:)
      )

    case "NewPlayer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_NewPlayerRequest>(),
        responseSerializer: ProtobufSerializer<RABackend_NewPlayerResponse>(),
        interceptors: self.interceptors?.makeNewPlayerInterceptors() ?? [],
        wrapping: self.newPlayer(request:context:)
      )

    case "login":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_LoginRequest>(),
        responseSerializer: ProtobufSerializer<RABackend_LoginResponse>(),
        interceptors: self.interceptors?.makeloginInterceptors() ?? [],
        wrapping: self.login(request:context:)
      )

    case "Authenticate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_Credentials>(),
        responseSerializer: ProtobufSerializer<RABackend_AuthenticationResponse>(),
        interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? [],
        wrapping: self.authenticate(request:context:)
      )

    case "logout":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makelogoutInterceptors() ?? [],
        wrapping: self.logout(request:context:)
      )

    case "addGameplayPortal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_Endpoint>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeaddGameplayPortalInterceptors() ?? [],
        wrapping: self.addGameplayPortal(request:context:)
      )

    case "removeGameplayPortal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_Endpoint>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeremoveGameplayPortalInterceptors() ?? [],
        wrapping: self.removeGameplayPortal(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol RABackend_PlayerPortalServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'salt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesaltInterceptors() -> [ServerInterceptor<RABackend_PlayerID, RABackend_SaltResponse>]

  /// - Returns: Interceptors to use when handling 'newPlayer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewPlayerInterceptors() -> [ServerInterceptor<RABackend_NewPlayerRequest, RABackend_NewPlayerResponse>]

  /// - Returns: Interceptors to use when handling 'login'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeloginInterceptors() -> [ServerInterceptor<RABackend_LoginRequest, RABackend_LoginResponse>]

  /// - Returns: Interceptors to use when handling 'authenticate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateInterceptors() -> [ServerInterceptor<RABackend_Credentials, RABackend_AuthenticationResponse>]

  /// - Returns: Interceptors to use when handling 'logout'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makelogoutInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'addGameplayPortal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeaddGameplayPortalInterceptors() -> [ServerInterceptor<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'removeGameplayPortal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeremoveGameplayPortalInterceptors() -> [ServerInterceptor<RABackend_Endpoint, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum RABackend_PlayerPortalServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PlayerPortal",
    fullName: "RABackend.PlayerPortal",
    methods: [
      RABackend_PlayerPortalServerMetadata.Methods.ping,
      RABackend_PlayerPortalServerMetadata.Methods.salt,
      RABackend_PlayerPortalServerMetadata.Methods.newPlayer,
      RABackend_PlayerPortalServerMetadata.Methods.login,
      RABackend_PlayerPortalServerMetadata.Methods.authenticate,
      RABackend_PlayerPortalServerMetadata.Methods.logout,
      RABackend_PlayerPortalServerMetadata.Methods.addGameplayPortal,
      RABackend_PlayerPortalServerMetadata.Methods.removeGameplayPortal,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "ping",
      path: "/RABackend.PlayerPortal/ping",
      type: GRPCCallType.unary
    )

    public static let salt = GRPCMethodDescriptor(
      name: "salt",
      path: "/RABackend.PlayerPortal/salt",
      type: GRPCCallType.unary
    )

    public static let newPlayer = GRPCMethodDescriptor(
      name: "NewPlayer",
      path: "/RABackend.PlayerPortal/NewPlayer",
      type: GRPCCallType.unary
    )

    public static let login = GRPCMethodDescriptor(
      name: "login",
      path: "/RABackend.PlayerPortal/login",
      type: GRPCCallType.unary
    )

    public static let authenticate = GRPCMethodDescriptor(
      name: "Authenticate",
      path: "/RABackend.PlayerPortal/Authenticate",
      type: GRPCCallType.unary
    )

    public static let logout = GRPCMethodDescriptor(
      name: "logout",
      path: "/RABackend.PlayerPortal/logout",
      type: GRPCCallType.unary
    )

    public static let addGameplayPortal = GRPCMethodDescriptor(
      name: "addGameplayPortal",
      path: "/RABackend.PlayerPortal/addGameplayPortal",
      type: GRPCCallType.unary
    )

    public static let removeGameplayPortal = GRPCMethodDescriptor(
      name: "removeGameplayPortal",
      path: "/RABackend.PlayerPortal/removeGameplayPortal",
      type: GRPCCallType.unary
    )
  }
}
/// To build a server, implement a class that conforms to this protocol.
public protocol RABackend_GatewayProvider: CallHandlerProvider {
  var interceptors: RABackend_GatewayServerInterceptorFactoryProtocol? { get }

  func ping(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func connect(context: StreamingResponseCallContext<RABackend_GameStatus>) -> EventLoopFuture<(StreamEvent<RABackend_GameCommand>) -> Void>
}

extension RABackend_GatewayProvider {
  public var serviceName: Substring {
    return RABackend_GatewayServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makepingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "connect":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_GameCommand>(),
        responseSerializer: ProtobufSerializer<RABackend_GameStatus>(),
        interceptors: self.interceptors?.makeconnectInterceptors() ?? [],
        observerFactory: self.connect(context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RABackend_GatewayAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RABackend_GatewayServerInterceptorFactoryProtocol? { get }

  @Sendable func ping(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func connect(
    requestStream: GRPCAsyncRequestStream<RABackend_GameCommand>,
    responseStream: GRPCAsyncResponseStreamWriter<RABackend_GameStatus>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_GatewayAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RABackend_GatewayServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return RABackend_GatewayServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: RABackend_GatewayServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makepingInterceptors() ?? [],
        wrapping: self.ping(request:context:)
      )

    case "connect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_GameCommand>(),
        responseSerializer: ProtobufSerializer<RABackend_GameStatus>(),
        interceptors: self.interceptors?.makeconnectInterceptors() ?? [],
        wrapping: self.connect(requestStream:responseStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol RABackend_GatewayServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'connect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeconnectInterceptors() -> [ServerInterceptor<RABackend_GameCommand, RABackend_GameStatus>]
}

public enum RABackend_GatewayServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Gateway",
    fullName: "RABackend.Gateway",
    methods: [
      RABackend_GatewayServerMetadata.Methods.ping,
      RABackend_GatewayServerMetadata.Methods.connect,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "ping",
      path: "/RABackend.Gateway/ping",
      type: GRPCCallType.unary
    )

    public static let connect = GRPCMethodDescriptor(
      name: "connect",
      path: "/RABackend.Gateway/connect",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
/// To build a server, implement a class that conforms to this protocol.
public protocol RABackend_GamePortalProvider: CallHandlerProvider {
  var interceptors: RABackend_GamePortalServerInterceptorFactoryProtocol? { get }

  func ping(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<RABackend_PingReport>

  func connect(context: StreamingResponseCallContext<RABackend_GameStatus>) -> EventLoopFuture<(StreamEvent<RABackend_GameCommand>) -> Void>
}

extension RABackend_GamePortalProvider {
  public var serviceName: Substring {
    return RABackend_GamePortalServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<RABackend_PingReport>(),
        interceptors: self.interceptors?.makepingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "connect":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_GameCommand>(),
        responseSerializer: ProtobufSerializer<RABackend_GameStatus>(),
        interceptors: self.interceptors?.makeconnectInterceptors() ?? [],
        observerFactory: self.connect(context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RABackend_GamePortalAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RABackend_GamePortalServerInterceptorFactoryProtocol? { get }

  @Sendable func ping(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> RABackend_PingReport

  @Sendable func connect(
    requestStream: GRPCAsyncRequestStream<RABackend_GameCommand>,
    responseStream: GRPCAsyncResponseStreamWriter<RABackend_GameStatus>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RABackend_GamePortalAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RABackend_GamePortalServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return RABackend_GamePortalServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: RABackend_GamePortalServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<RABackend_PingReport>(),
        interceptors: self.interceptors?.makepingInterceptors() ?? [],
        wrapping: self.ping(request:context:)
      )

    case "connect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RABackend_GameCommand>(),
        responseSerializer: ProtobufSerializer<RABackend_GameStatus>(),
        interceptors: self.interceptors?.makeconnectInterceptors() ?? [],
        wrapping: self.connect(requestStream:responseStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol RABackend_GamePortalServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, RABackend_PingReport>]

  /// - Returns: Interceptors to use when handling 'connect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeconnectInterceptors() -> [ServerInterceptor<RABackend_GameCommand, RABackend_GameStatus>]
}

public enum RABackend_GamePortalServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "GamePortal",
    fullName: "RABackend.GamePortal",
    methods: [
      RABackend_GamePortalServerMetadata.Methods.ping,
      RABackend_GamePortalServerMetadata.Methods.connect,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "ping",
      path: "/RABackend.GamePortal/ping",
      type: GRPCCallType.unary
    )

    public static let connect = GRPCMethodDescriptor(
      name: "connect",
      path: "/RABackend.GamePortal/connect",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
